# RUN: llc -mtriple=aarch64-none-linux-gnu -run-pass=prologepilog %s -o - | FileCheck %s

# Ensure we don't perform stack slot scavenging when the stack pointer must be
# aligned to something larger than required by the target. Allowing scavenging
# can result in the callee-save region being corrupted when FP is used to build
# the callee-save area and SP used to spill into it.  This is becuase the value
# of FP-SP becomes runtime variable after the alignment.
--- |

  define void @test(float* %p) nounwind {
  entry:
    %large_aligned_var = alloca float, align 64
    %small_aligned_var = alloca float, align 4
    %s0 = load float, float* %p, align 4
    store volatile float %s0, float* %large_aligned_var, align 4
    store volatile float %s0, float* %small_aligned_var, align 4
    call void asm sideeffect "; inlineasm", "~{x28}"()
    ret void
  }

...
---
name:            test
alignment:       2
tracksRegLiveness: true
liveins:
  - { reg: '%x0' }
frameInfo:
  maxAlignment:    64
# CHECK:      stack:
# CHECK:        name: large_aligned_var, type: default, offset: -64, size: 4,
# CHECK-NEXT:     alignment: 64, callee-saved-register: '', local-offset: -64
# CHECK:        name: small_aligned_var, type: default, offset: -68, size: 4,
# CHECK-NEXT:     alignment: 4, callee-saved-register: '', local-offset: -68
stack:
  - { id: 0, name: large_aligned_var, size: 4, alignment: 64, local-offset: -64 }
  - { id: 1, name: small_aligned_var, size: 4, alignment: 4, local-offset: -68 }

# CHECK: body:
# CHECK:   %sp = ANDXri killed %{{x[0-9]+}}, 7865
# CHECK:   STRSui %s0, %sp, 16
# CHECK:   STRSui killed %s0, %sp, 15
body:             |
  bb.0.entry:
    liveins: %x0

    %s0 = LDRSui killed %x0, 0 :: (load 4 from %ir.p)
    STRSui %s0, %stack.0.large_aligned_var, 0 :: (volatile store 4 into %ir.large_aligned_var, align 64)
    STRSui killed %s0, %stack.1.small_aligned_var, 0 :: (volatile store 4 into %ir.small_aligned_var)
    ; Force preserve a CSR to create a hole in the CSR stack region.
    INLINEASM $"; inlineasm", 1, 12, implicit-def dead early-clobber %x28
    RET_ReallyLR

...
