; RUN: llc -mtriple=aarch64--linux-gnu -mattr=+sve -aarch64-sve-postvec=false < %s | FileCheck %s

%vtype = type <n x 8 x i16>
%ptype = type <n x 16 x i1>
%itype = type i64
%svint32x2_t = type { <n x 4 x i32>, <n x 4 x i32> }

@iread  = external global %itype
@iwrite = external global %itype
@pread  = external global %ptype
@pwrite = external global %ptype
@vread  = external global %vtype
@vwrite = external global %vtype

declare %itype @dummy_non_sve_fn()
declare %vtype @dummy_sve_fn()

; CHECK-LABEL: calleesave_fp_z8
define %vtype @calleesave_fp_z8(i8** %fa) #1 {
entry:
; CHECK: add x29, sp, #16
; CHECK: .cfi_def_cfa w29, 16
; CHECK: .cfi_offset w30, -8
; CHECK: .cfi_offset w29, -16
; CHECK: .cfi_offset w28, -32
; CHECK:  cfi(Z8) = CFA + -16 + VG * 8
; CHECK: .cfi_escape 0x10, 0x68, 0x0d, 0x11, 0x08, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK-NOT: .cfi_escape
  %tmp = call i8* @llvm.frameaddress(i32 0)
  store i8* %tmp, i8** %fa

  %z0 = load volatile %vtype , %vtype *@vread
  %z1 = load volatile %vtype , %vtype *@vread
  %z2 = load volatile %vtype , %vtype *@vread
  %z3 = load volatile %vtype , %vtype *@vread
  %z4 = load volatile %vtype , %vtype *@vread
  %z5 = load volatile %vtype , %vtype *@vread
  %z6 = load volatile %vtype , %vtype *@vread
  %z7 = load volatile %vtype , %vtype *@vread
  %z8 = load volatile %vtype , %vtype *@vread ; needs to be callee saved

  store volatile %vtype %z0, %vtype* @vwrite
  store volatile %vtype %z1, %vtype* @vwrite
  store volatile %vtype %z2, %vtype* @vwrite
  store volatile %vtype %z3, %vtype* @vwrite
  store volatile %vtype %z4, %vtype* @vwrite
  store volatile %vtype %z5, %vtype* @vwrite
  store volatile %vtype %z6, %vtype* @vwrite
  store volatile %vtype %z7, %vtype* @vwrite
  store volatile %vtype %z8, %vtype* @vwrite

  ; Call some SVE function so it will have to spill z8
  %zd = call %vtype @dummy_sve_fn()

  ret %vtype %zd
}
attributes #1 = { noinline "no-frame-pointer-elim"="true" }

; CHECK-LABEL: calleesave_nofp_z8_def_cfa
define %vtype @calleesave_nofp_z8_def_cfa() #2 {
entry:
; CHECK: cfa = SP + 16 + VG * 8
; CHECK: .cfi_escape 0x0f, 0x0d, 0x11, 0x08, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x10, 0x22, 0x92, 0x1f, 0x00, 0x22
; CHECK: cfi(LR) = SP + 8
; CHECK: .cfi_escape 0x10, 0x1e, 0x06, 0x11, 0x08, 0x92, 0x1f, 0x00, 0x22
; CHECK: cfi(X28) = SP + 0
; CHECK: .cfi_escape 0x10, 0x1c, 0x06, 0x11, 0x00, 0x92, 0x1f, 0x00, 0x22
; CHECK: cfi(Z8) = SP + 16 + VG * 0
; CHECK: .cfi_escape 0x10, 0x68, 0x06, 0x11, 0x10, 0x92, 0x1f, 0x00, 0x22
  %z0 = load volatile %vtype , %vtype *@vread
  %z1 = load volatile %vtype , %vtype *@vread
  %z2 = load volatile %vtype , %vtype *@vread
  %z3 = load volatile %vtype , %vtype *@vread
  %z4 = load volatile %vtype , %vtype *@vread
  %z5 = load volatile %vtype , %vtype *@vread
  %z6 = load volatile %vtype , %vtype *@vread
  %z7 = load volatile %vtype , %vtype *@vread
  %z8 = load volatile %vtype , %vtype *@vread ; needs to be callee saved

  store volatile %vtype %z0, %vtype* @vwrite
  store volatile %vtype %z1, %vtype* @vwrite
  store volatile %vtype %z2, %vtype* @vwrite
  store volatile %vtype %z3, %vtype* @vwrite
  store volatile %vtype %z4, %vtype* @vwrite
  store volatile %vtype %z5, %vtype* @vwrite
  store volatile %vtype %z6, %vtype* @vwrite
  store volatile %vtype %z7, %vtype* @vwrite
  store volatile %vtype %z8, %vtype* @vwrite

  ; Call some SVE function so it will have to spill z8
  %zd = call %vtype @dummy_sve_fn()

  ret %vtype %zd
}
attributes #2 = { noinline "no-frame-pointer-elim"="false" }

; CHECK-LABEL: calleesave_fp_z8z31
define %vtype @calleesave_fp_z8z31(i8** %fa) #1 {
entry:
; CHECK: add x29, sp, #16
; CHECK: .cfi_def_cfa w29, 16

; CHECK:  cfi(Z8) = CFA + -16 + VG * 216
; CHECK: .cfi_escape 0x10, 0x68, 0x0e, 0x11, 0xd8, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z9) = CFA + -16 + VG * 208
; CHECK: .cfi_escape 0x10, 0x69, 0x0e, 0x11, 0xd0, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z10) = CFA + -16 + VG * 200
; CHECK: .cfi_escape 0x10, 0x6a, 0x0e, 0x11, 0xc8, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z11) = CFA + -16 + VG * 192
; CHECK: .cfi_escape 0x10, 0x6b, 0x0e, 0x11, 0xc0, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z12) = CFA + -16 + VG * 184
; CHECK: .cfi_escape 0x10, 0x6c, 0x0e, 0x11, 0xb8, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z13) = CFA + -16 + VG * 176
; CHECK: .cfi_escape 0x10, 0x6d, 0x0e, 0x11, 0xb0, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z14) = CFA + -16 + VG * 168
; CHECK: .cfi_escape 0x10, 0x6e, 0x0e, 0x11, 0xa8, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z15) = CFA + -16 + VG * 160
; CHECK: .cfi_escape 0x10, 0x6f, 0x0e, 0x11, 0xa0, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z16) = CFA + -16 + VG * 152
; CHECK: .cfi_escape 0x10, 0x70, 0x0e, 0x11, 0x98, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z17) = CFA + -16 + VG * 144
; CHECK: .cfi_escape 0x10, 0x71, 0x0e, 0x11, 0x90, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z18) = CFA + -16 + VG * 136
; CHECK: .cfi_escape 0x10, 0x72, 0x0e, 0x11, 0x88, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z19) = CFA + -16 + VG * 128
; CHECK: .cfi_escape 0x10, 0x73, 0x0e, 0x11, 0x80, 0x01, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z20) = CFA + -16 + VG * 120
; CHECK: .cfi_escape 0x10, 0x74, 0x0e, 0x11, 0xf8, 0x00, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z21) = CFA + -16 + VG * 112
; CHECK: .cfi_escape 0x10, 0x75, 0x0e, 0x11, 0xf0, 0x00, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z22) = CFA + -16 + VG * 104
; CHECK: .cfi_escape 0x10, 0x76, 0x0e, 0x11, 0xe8, 0x00, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z23) = CFA + -16 + VG * 96
; CHECK: .cfi_escape 0x10, 0x77, 0x0e, 0x11, 0xe0, 0x00, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z24) = CFA + -16 + VG * 88
; CHECK: .cfi_escape 0x10, 0x78, 0x0e, 0x11, 0xd8, 0x00, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z25) = CFA + -16 + VG * 80
; CHECK: .cfi_escape 0x10, 0x79, 0x0e, 0x11, 0xd0, 0x00, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z26) = CFA + -16 + VG * 72
; CHECK: .cfi_escape 0x10, 0x7a, 0x0e, 0x11, 0xc8, 0x00, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z27) = CFA + -16 + VG * 64
; CHECK: .cfi_escape 0x10, 0x7b, 0x0e, 0x11, 0xc0, 0x00, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z28) = CFA + -16 + VG * 56
; CHECK: .cfi_escape 0x10, 0x7c, 0x0d, 0x11, 0x38, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z29) = CFA + -16 + VG * 48
; CHECK: .cfi_escape 0x10, 0x7d, 0x0d, 0x11, 0x30, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z30) = CFA + -16 + VG * 40
; CHECK: .cfi_escape 0x10, 0x7e, 0x0d, 0x11, 0x28, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(Z31) = CFA + -16 + VG * 32
; CHECK: .cfi_escape 0x10, 0x7f, 0x0d, 0x11, 0x20, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P4) = CFA + -16 + VG * 23
; CHECK: .cfi_escape 0x10, 0x34, 0x0d, 0x11, 0x17, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P5) = CFA + -16 + VG * 22
; CHECK: .cfi_escape 0x10, 0x35, 0x0d, 0x11, 0x16, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P6) = CFA + -16 + VG * 21
; CHECK: .cfi_escape 0x10, 0x36, 0x0d, 0x11, 0x15, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P7) = CFA + -16 + VG * 20
; CHECK: .cfi_escape 0x10, 0x37, 0x0d, 0x11, 0x14, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P8) = CFA + -16 + VG * 19
; CHECK: .cfi_escape 0x10, 0x38, 0x0d, 0x11, 0x13, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P9) = CFA + -16 + VG * 18
; CHECK: .cfi_escape 0x10, 0x39, 0x0d, 0x11, 0x12, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P10) = CFA + -16 + VG * 17
; CHECK: .cfi_escape 0x10, 0x3a, 0x0d, 0x11, 0x11, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P11) = CFA + -16 + VG * 16
; CHECK: .cfi_escape 0x10, 0x3b, 0x0d, 0x11, 0x10, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P12) = CFA + -16 + VG * 15
; CHECK: .cfi_escape 0x10, 0x3c, 0x0d, 0x11, 0x0f, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P13) = CFA + -16 + VG * 14
; CHECK: .cfi_escape 0x10, 0x3d, 0x0d, 0x11, 0x0e, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P14) = CFA + -16 + VG * 13
; CHECK: .cfi_escape 0x10, 0x3e, 0x0d, 0x11, 0x0d, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
; CHECK:  cfi(P15) = CFA + -16 + VG * 12
; CHECK: .cfi_escape 0x10, 0x3f, 0x0d, 0x11, 0x0c, 0x92, 0x2e, 0x00, 0x1e, 0x11, 0x00, 0x22, 0x92, 0x1d, 0x00, 0x22
  %tmp = call i8* @llvm.frameaddress(i32 0)
  store i8* %tmp, i8** %fa

  %z0 = load volatile %vtype , %vtype *@vread
  %z1 = load volatile %vtype , %vtype *@vread
  %z2 = load volatile %vtype , %vtype *@vread
  %z3 = load volatile %vtype , %vtype *@vread
  %z4 = load volatile %vtype , %vtype *@vread
  %z5 = load volatile %vtype , %vtype *@vread
  %z6 = load volatile %vtype , %vtype *@vread
  %z7 = load volatile %vtype , %vtype *@vread
  %z8 = load volatile %vtype , %vtype *@vread ; needs to be callee saved

  store volatile %vtype %z0, %vtype* @vwrite
  store volatile %vtype %z1, %vtype* @vwrite
  store volatile %vtype %z2, %vtype* @vwrite
  store volatile %vtype %z3, %vtype* @vwrite
  store volatile %vtype %z4, %vtype* @vwrite
  store volatile %vtype %z5, %vtype* @vwrite
  store volatile %vtype %z6, %vtype* @vwrite
  store volatile %vtype %z7, %vtype* @vwrite
  store volatile %vtype %z8, %vtype* @vwrite

  ; Call some SVE function so it will have to spill z8
  %rd = call %itype @dummy_non_sve_fn()
  store volatile %itype %rd, %itype *@iwrite

  ret %vtype %z8
}

declare i8* @llvm.frameaddress(i32)
